CatherineTLDRch2

Chapter 2 - Application Layer
	2.1 - Principles of Network Applications
		Creating Network App
			- must run on different end systems and communicate over the network
			- core doesn't run user applications

		Architecture
			Client-Server
				- Always on server host, permanentIP
				- Clients communicate with server, 
					don't necessarily have staticIP, 
					don't communicate with each other directly
			PeerToPeer
				- No always on server
				- end systems directly communicate
				- peers request data and others send. 
				- Complex management (security very important)
				- Uses lots of bandwidth (potentially)
				- More users = more processing power and more bandwidth required

		Process Communication
			client process: initiate communication
			server process: waits for contact

		Socket
			- interface between process and computer network
			- process send/receive through sockets
			- similar to a door

		Addressing
			- messages must have an identifier
			- host has 32 bit IP address
			- Idenfitier based off IPaddre + port

			port80 = HTTP server
			port25 = mail server

			Protocols dictate how this information is structures and its properties
			- types of message
			- syntax
			- semantics
			- rules for responding/sending

		Transport Service Requirements
			Data Integrity
				- some tings need 100% reliability
				- some can tolerate loss
			Timing
				- Some time sensitive and some not
			Throughput
				- Some things like video need high throughput to work
				- Some elastic/dynamic
			Security
				- Data integrity, encryption

		Transport Services
			TCP (Transport Control Protocol) service
				- reliable
				- flow & congestion control
				- no timing, throughput guarantee or security
				- connection oriented. Need to establish

			UDP (User Datagram Protocol) service
				- Unreliable
				- No reliability, flow control, ongestion, timing, or throughput guarantee, security or connection setup
				- Much faster than TCP

			SSL (Secure Socket Layer) at app layer
				- Encrypted TCP connection
				- Data integrity
				- end-to-end authentication

	2.2 - Web and HTTP[Hyper text transport protocol]
		General
			- Websites contain objects
			- baseHTML file
			- addressed by URL
			- Is web application layer
			- client send request, server return objects
			- Uses TCP @ port 80
			- Stateless (doesn't know about past requests)

		Types
			PersistentHTTP
				- Multiple objects sent over single TCP connection
				- as little as one RTT per object retrieved.

			nonPersistentHTTP
				- At most one object sent over TCP connection, then connection closed
				- If need multiple objects then need to make multiple conntections
				- 2RTT + object transfer time per object (establish connection + GET)

		HTTP request
			Two types:
				- request message
				- response message
			- Encoded in ASCII
				- Contains things like HTTP type, request line, language, host, etc

			Uploading Content:
				HTTP POST method
					- web page with form input
					- input/s uploaded to server as entity body

				URL mehtod
					- uses HTTP GET
					- input put in URL sent

		Method Types
			HTTP 1.0
				- GET, POST, HEAD (ask server to leave out requested object from response)

			HTTP 1.1
				- GET, POST, HEAD
				- PUT (upload file in entity body)
				- DELETE (delete file in URL)

		HTTP Response
			- Also in ASCII and contains information about server, etc..

			200 = OK. Request good and object in message
			301 = Moved Permanently, object has moved. New location in msg
			400 = Bad Request. msg not understood
			404 = Not found. Can't find document
			505 = HTTP version not supported

		Cookies
			- File kept in host to retain information about previous sessions.

			- If no cookie already present, will make one for you and then execute request.
			- If cookie present will execute request

			Uses:
				- Authorisation
				- Shopping Carts
				- Recommendations
				- User session state

			- Cookies let sites learn lots about you

		Proxy Servers/Caches
			Goal: Process client request without using origin server.

			- Your web browser connects to the cache.
			- If request and object in cache then return object.
			- Otherwise then proxy will request object from origin then return that object

			- Cache is both client and server
				- client as they request from origin sometimes
				- server as it returns objects to end hosts

			- Improves response times for certain sites and client requests.
			- Reduce traffic on origin server

			- cheaper and faster than adding fatter connection pipe

		Conditional GET
			Goal: only send object if newer than one that we already have.
			- Cache date of object
			- Then GET request can request of object [if modified since XXX]
			- if not then send HTTP 304 (not modified)
			- otherwise send new object with HTTP200

	2.3 - Email
		Components
			- User agents
				- mail readers
				- edit, read, make emails
				- outgoing and incoming messages stored on server

			- Mail servers
				- mailbox (contain incoming mail for user)
				- message queue (outgoing messages to be sent)

		SMTP (Simpe mail transfer protocol)
			- between mail servers to send messages
			- uses TCP for reliability (part25)
			- messages as 7bit ASCII
			- has request/response likt HTTP
			- persistent connections

			phases
			- handshake
			- transfer
			- closure

			Scenario:
				- A sends message to mail server X
				- X connects with Y
				- Y sends message to B

			- Unlike HTTP SMTP messages have multiple objects sent in multiple parts. HTTP has each object in its own message

			Protocols
				- POP Post Office Protocol
					- Only copy kept on client
					- If deleted then lost
					- Stateless across sessions

				- IMAP Internet Mail Access Protocol
					- Messages held in sever
					- user can organise mail
					- State kept between sessionsqqq

				- HTTP (gmail, hotmail, etc..)

	2.4 - DNS Domain Name System
		General
			- maps IP addresses and names
			- Distributed database in heirarchy
			- Applicaton layer protocol, resolves names to IP addresses
				- Does this for hosts and mail servers
			- Decentralised so no single point of failure

		Heirarchy
			- Root DNS server
			- com/org/edu DNS server
			- google.com/facebook.com DNS servers

			- Root queried to get extension
			- Extension queried to get sitename
			- Sitename queried to get IP address of website

		TLD/Authoritative servers
			TLD = Top level domain
				- responsible for com/org nz/eu

			Authoritative DNS
				- Organisation owns own server
				- Proved hostname-IP for own hosts
				- Maintained by org, or service provider

		LocalDNS
			- Doesn't strictly belong to heirarchy
			- each ISP (residential/company/uni) has one [Default NS]
			- Act as proxy as something in there queries this first

		Resolution
			Iterative
				- Ask local
				- Local ask root and return TLD
				- local ask TLD that return authoritative
				- ask authoritative which return IP

			Recursive
				- local ask root
				- root ask TLD
				- TLD ask authoritative
				- All gets pushed back to host

		Caching
			- once learns mapping will cache it
			- this mapping has TTL

		Record types
			In format (name, value, type, ttl)

			TYPE(A)
				name = hostname
				value = IP address

			TYPE(CNAME)
				name = alias for real name
				value = canonical name

			TYPE(NS)
				name = domain
				value = hostname of authoritative server

			TYPE(MX)
				value = mailserver name

		Messages
			- both query and response same format
			- 16bit header for identification
			- bunch of flags afterwards

		Inserting Records
			- register name at DNS registrar
			- Creat authoritative A and MX record

		Attacking
			DDOS
				- bombard root with traffic
				- bombard TLD (maybe more danger)

			Redirect
				- man in middle
				- send bogus information (poison)

			Use DNS for DDOS
				- make things query servers lots

	2.5 - P2P applications

	2.6 - Video Streaming and CDN

	2.7 - Socket Programming, UDP & TCP

